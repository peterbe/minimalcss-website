{"version":3,"file":"static/js/140.a8da64e7.chunk.js","mappings":"2KAUMA,EAAa,SAACC,GAAyB,IAAlBC,EAAiB,uDAAN,EACpC,IAAKD,EAAO,MAAO,UACnB,IAAME,EAAI,KACJC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5DC,EAAIC,KAAKC,MAAMD,KAAKE,IAAIP,GAASK,KAAKE,IAAIL,IAChD,OACEM,YAAYR,EAAQK,KAAKI,IAAIP,EAAGE,IAAIM,QAAQT,IAAa,IAAME,EAAMC,IAkHzE,UA7GA,YAA8D,IAArCO,EAAoC,EAApCA,mBAAoBC,EAAgB,EAAhBA,aA0G3C,OAzGAC,EAAAA,WAAgB,WACd,IAAMC,EAAW,GACXC,EAAsB,CAC1B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAlD4BC,MAAK,kBAAMX,KAAKY,SAAW,MAqDrDb,EAAI,EACRc,OAAOC,KAAKR,GAAoBS,SAAQ,SAACC,GApDvB,IAACC,EAqDjBR,EAASS,KAAK,CACZC,OAtDeF,EAsDMD,EArDjB,IAAII,IAAIH,GACTI,UAqDHC,gBAAiBZ,EAAOX,KACxBwB,MAAO,SACPC,KAAM,CAAClB,EAAmBU,GAAYS,OAAQ,QAGlDhB,EAASS,KAAK,CACZC,MAAO,UACPG,gBAAiBZ,EAAO,GACxBa,MAAO,QACPC,KAAM,CAAC,EAAGjB,KAGZ,IAAMmB,EAAe,CACnBC,OAAQ,CAAC,SAAU,SACnBlB,SAAUA,GAGNmB,EAAMC,SAASC,eAAe,aAAaC,WAAW,MAC5D,IAAIC,IAAJ,CAAUJ,EAAK,CACbK,KAAM,MACNT,KAAME,EACNQ,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,8CAERC,SAAU,CACRF,SAAS,EACTG,KAAM,QACNC,WAAW,EACXC,UAAW,CACTtB,MAAO,SAAUuB,EAAalB,GAC5B,GAA2B,IAAvBkB,EAAYC,OACd,OAAO,KAET,IAAIxB,EAAQK,EAAKf,SAASiC,EAAYE,cAAczB,OAAS,GAK7D,OAJIA,IACFA,GAAS,MAEXA,GAASzB,EAAWgD,EAAYC,OAAQ,GACjCxB,KAIb0B,OAAQ,CACNT,SAAS,GAEXU,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,SAAS,IAGbC,MAAO,CACL,CACED,SAAS,EACTE,MAAO,CACLC,SAAU,SAACjC,GAAD,OAAWzB,EAAWyB,EAAO,aAOlD,CAACZ,EAAcD,KAEX,mBAAQ+C,GAAG","sources":["SizeGraph.js"],"sourcesContent":["import React from \"react\";\nimport Chart from \"chart.js\";\n\nconst shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\n\nconst urlToPathname = (url) => {\n  const u = new URL(url);\n  return u.pathname;\n};\n\nconst formatSize = (bytes, decimals = 1) => {\n  if (!bytes) return \"0 bytes\";\n  const k = 1024;\n  const sizes = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return (\n    parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + \" \" + sizes[i]\n  );\n};\n\n// class ShowSizeGraph extends React.PureComponent {\nfunction ShowSizeGraph({ stylesheetContents, newTotalSize }) {\n  React.useEffect(() => {\n    const datasets = [];\n    const colors = shuffleArray([\n      \"#ff0029\",\n      \"#377eb8\",\n      \"#66a61e\",\n      \"#984ea3\",\n      \"#00d2d5\",\n      \"#ff7f00\",\n      \"#af8d00\",\n      \"#7f80cd\",\n      \"#b3e900\",\n      \"#c42e60\",\n      \"#a65628\",\n      \"#f781bf\",\n      \"#8dd3c7\",\n      \"#bebada\",\n      \"#fb8072\",\n      \"#80b1d3\",\n      \"#fdb462\",\n      \"#fccde5\",\n      \"#bc80bd\",\n      \"#ffed6f\",\n      \"#c4eaff\",\n      \"#cf8c00\",\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#e7298a\",\n      \"#e6ab02\",\n      \"#a6761d\",\n      \"#0097ff\",\n      \"#00d067\",\n    ]);\n\n    let i = 1;\n    Object.keys(stylesheetContents).forEach((stylesheet) => {\n      datasets.push({\n        label: urlToPathname(stylesheet),\n        backgroundColor: colors[i++],\n        stack: \"Before\",\n        data: [stylesheetContents[stylesheet].length, 0],\n      });\n    });\n    datasets.push({\n      label: \"minimal\",\n      backgroundColor: colors[0],\n      stack: \"After\",\n      data: [0, newTotalSize],\n    });\n\n    const barChartData = {\n      labels: [\"Before\", \"After\"],\n      datasets: datasets,\n    };\n\n    const ctx = document.getElementById(\"sizegraph\").getContext(\"2d\");\n    new Chart(ctx, {\n      type: \"bar\",\n      data: barChartData,\n      options: {\n        title: {\n          display: true,\n          text: \"Smaller bar(s) means less downloading time\",\n        },\n        tooltips: {\n          display: false,\n          mode: \"index\",\n          intersect: false,\n          callbacks: {\n            label: function (tooltipItem, data) {\n              if (tooltipItem.yLabel === 0) {\n                return null;\n              }\n              var label = data.datasets[tooltipItem.datasetIndex].label || \"\";\n              if (label) {\n                label += \": \";\n              }\n              label += formatSize(tooltipItem.yLabel, 0);\n              return label;\n            },\n          },\n        },\n        legend: {\n          display: false,\n        },\n        responsive: true,\n        scales: {\n          xAxes: [\n            {\n              stacked: true,\n            },\n          ],\n          yAxes: [\n            {\n              stacked: true,\n              ticks: {\n                callback: (label) => formatSize(label, 0),\n              },\n            },\n          ],\n        },\n      },\n    });\n  }, [newTotalSize, stylesheetContents]);\n\n  return <canvas id=\"sizegraph\" />;\n}\n\nexport default ShowSizeGraph;\n"],"names":["formatSize","bytes","decimals","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","stylesheetContents","newTotalSize","React","datasets","colors","sort","random","Object","keys","forEach","stylesheet","url","push","label","URL","pathname","backgroundColor","stack","data","length","barChartData","labels","ctx","document","getElementById","getContext","Chart","type","options","title","display","text","tooltips","mode","intersect","callbacks","tooltipItem","yLabel","datasetIndex","legend","responsive","scales","xAxes","stacked","yAxes","ticks","callback","id"],"sourceRoot":""}